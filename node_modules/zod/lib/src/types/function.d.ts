import * as z from './base';
import { ZodTuple } from './tuple';
export interface ZodFunctionDef<Args extends ZodTuple<any> = ZodTuple<any>, Returns extends z.ZodAny = z.ZodAny> extends z.ZodTypeDef {
    t: z.ZodTypes.function;
    args: Args;
    returns: Returns;
}
export declare type TypeOfFunction<Args extends ZodTuple<any>, Returns extends z.ZodAny> = Args['_type'] extends Array<any> ? (...args: Args['_type']) => Returns['_type'] : never;
export declare class ZodFunction<Args extends ZodTuple<any>, Returns extends z.ZodAny> {
    readonly _def: ZodFunctionDef<Args, Returns>;
    readonly _type: TypeOfFunction<Args, Returns>;
    constructor(def: ZodFunctionDef<Args, Returns>);
    implement: (func: TypeOfFunction<Args, Returns>) => TypeOfFunction<Args, Returns>;
    validate: (func: TypeOfFunction<Args, Returns>) => TypeOfFunction<Args, Returns>;
    static create: <T extends ZodTuple<any>, U extends z.ZodType<any, z.ZodTypeDef>>(args: T, returns: U) => ZodFunction<T, U>;
}
