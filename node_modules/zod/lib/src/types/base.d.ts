import { ParseParams } from '../parser';
export declare enum ZodTypes {
    string = "string",
    number = "number",
    boolean = "boolean",
    date = "date",
    undefined = "undefined",
    null = "null",
    array = "array",
    object = "object",
    union = "union",
    intersection = "intersection",
    tuple = "tuple",
    record = "record",
    function = "function",
    lazy = "lazy",
    lazyobject = "lazyobject",
    literal = "literal",
    enum = "enum"
}
export declare type ZodAny = ZodType<any>;
export declare type ZodRawShape = {
    [k: string]: ZodAny;
};
export interface ZodTypeDef {
    t: ZodTypes;
}
export declare type TypeOf<T extends {
    _type: any;
}> = T['_type'];
export declare type Infer<T extends {
    _type: any;
}> = T['_type'];
export declare abstract class ZodType<Type, Def extends ZodTypeDef = ZodTypeDef> {
    readonly _type: Type;
    readonly _def: Def;
    parse: (x: Type, params?: ParseParams) => Type;
    is(u: Type): u is Type;
    check(u: Type): u is Type;
    constructor(def: Def);
    abstract toJSON: () => object;
    abstract optional: () => any;
    abstract nullable: () => any;
}
