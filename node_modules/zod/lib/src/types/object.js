"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var z = __importStar(require("./base")); // change
var undefined_1 = require("./undefined");
var null_1 = require("./null");
var union_1 = require("./union");
var objectUtil_1 = require("../helpers/objectUtil");
// import { ZodString } from './string';
// import { maskUtil } from '../helpers/maskUtil';
// import { zodmaskUtil } from '../helpers/zodmaskUtil';
// import { applyMask } from '../masker';
var AugmentFactory = function (def) { return function (augmentation) {
    return new ZodObject(__assign({}, def, { shape: __assign({}, def.shape, augmentation) }));
}; };
// const infer = <T extends ZodObjectDef<any>>(def: T): T => def;
// const qewr = infer({ t: z.ZodTypes.object, shape: { asfd: ZodString.create() }, params: { strict: true } });
var objectDefToJson = function (def) { return ({
    t: def.t,
    shape: Object.assign({}, Object.keys(def.shape).map(function (k) {
        var _a;
        return (_a = {},
            _a[k] = def.shape[k].toJSON(),
            _a);
    })),
}); };
var ZodObject = /** @class */ (function (_super) {
    __extends(ZodObject, _super);
    function ZodObject() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.toJSON = function () { return objectDefToJson(_this._def); };
        _this.nonstrict = function () {
            return new ZodObject({
                shape: _this._def.shape,
                //  strict: false,
                t: z.ZodTypes.object,
                params: __assign({}, _this._params, { strict: false }),
            });
        };
        _this.optional = function () { return union_1.ZodUnion.create([_this, undefined_1.ZodUndefined.create()]); };
        _this.nullable = function () { return union_1.ZodUnion.create([_this, null_1.ZodNull.create()]); };
        //
        _this.augment = AugmentFactory(_this._def);
        // augment = <Augmentation extends z.ZodRawShape>(
        //   augmentation: Augmentation,
        // ): ZodObject<
        //   { [k in Exclude<keyof T, keyof Augmentation>]: T[k] } & { [k in keyof Augmentation]: Augmentation[k] },
        //   Params
        // > => {
        //   return new ZodObject({
        //     ...this._def,
        //     shape: {
        //       ...this._def.shape,
        //       ...augmentation,
        //     },
        //   }) as any;
        // };
        /**
         * Prior to zod@1.0.12 there was a bug in the
         * inferred type of merged objects. Please
         * upgrade if you are experiencing issues.
         */
        _this.merge = objectUtil_1.objectUtil.mergeObjects(_this);
        _this.pick = function (mask) {
            var shape = {};
            Object.keys(mask).map(function (key) {
                shape[key] = _this._def.shape[key];
            });
            return new ZodObject(__assign({}, _this._def, { shape: shape }));
        };
        // omitKeys = <OmitKeys extends (keyof T)[]>(...omit:OmitKeys):OmitKeys => omit;
        _this.omit = function (mask) {
            var shape = {};
            Object.keys(_this._def.shape).map(function (key) {
                if (!Object.keys(mask).includes(key)) {
                    shape[key] = _this._def.shape[key];
                }
            });
            return new ZodObject(__assign({}, _this._def, { shape: shape }));
        };
        _this.partial = function () {
            var newShape = {};
            for (var key in _this.shape) {
                newShape[key] = _this.shape[key].optional();
            }
            return new ZodObject(__assign({}, _this._def, { shape: newShape }));
        };
        _this.deepPartial = function () {
            var newShape = {};
            for (var key in _this.shape) {
                var fieldSchema = _this.shape[key];
                if (fieldSchema instanceof ZodObject) {
                    newShape[key] = fieldSchema.deepPartial().optional();
                }
                else {
                    newShape[key] = _this.shape[key].optional();
                }
            }
            return new ZodObject(__assign({}, _this._def, { shape: newShape }));
        };
        return _this;
    }
    Object.defineProperty(ZodObject.prototype, "shape", {
        get: function () {
            return this._def.shape;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZodObject.prototype, "params", {
        get: function () {
            return this._def.params;
        },
        enumerable: true,
        configurable: true
    });
    // pick = <Mask extends zodmaskUtil.Params<ZodObject<T>>>(
    //   mask: Mask,
    // ): zodmaskUtil.pick<ZodObject<T, Params>, Mask> => {
    //   return applyMask(this, mask, 'pick');
    // };
    // omit = <Mask extends zodmaskUtil.Params<ZodObject<T>>>(
    //   mask: Mask,
    // ): zodmaskUtil.omit<ZodObject<T, Params>, Mask> => {
    //   return applyMask(this, mask, 'omit');
    // };
    // relations = <Rels extends { [k: string]: any }>(
    //   lazyShape: { [k in keyof Rels]: ZodLazy<z.ZodType<Rels[k]>> },
    // ): RelationsReturnType<Rels, T> => {
    //   // const relationShape: any = {};
    //   // for (const key in lazyShape) {
    //   //   relationShape[key] = lazyShape[key]();
    //   // }
    //   // console.log(relationShape);
    //   // const relationKeys = Object.keys(lazyShape);
    //   // const existingKeys = Object.keys(this._def.shape);
    //   return new ZodObject({
    //     t: z.ZodTypes.object,
    //     strict: this._def.strict,
    //     shape: {
    //       ...this._def.shape,
    //       ...lazyShape,
    //     },
    //   }) as any;
    // };
    // static recursion = <R extends { [k: string]: any }>() => <T extends ZodObject<any>>(
    //   shape: withRefsInputType<T, R>,
    // ): ZodObject<withRefsReturnType<T, R>> => {
    //   //  const getters =
    //   return new ZodObject({ t: z.ZodTypes.object, strict: true, shape(); });
    // };
    ZodObject.create = function (shape) {
        return new ZodObject({
            t: z.ZodTypes.object,
            //  strict: true,
            shape: shape,
            params: {
                strict: true,
            },
        });
    };
    return ZodObject;
}(z.ZodType));
exports.ZodObject = ZodObject;
// type RelationsReturnType<Rels extends { [k: string]: any }, Shape extends z.ZodRawShape> = ZodObject<
//   Without<Shape, keyof Rels> & { [k in keyof Rels]: ZodLazy<z.ZodType<Rels[k]>> }
// >;
// type Without<T, K> = Pick<T, Exclude<keyof T, K>>;
// type withRefsInputType<T extends z.ZodObject, Refs extends { [k in keyof T]: any }> = ZodObject<
//   Without<T['_shape'], keyof Refs> & { [k in keyof Refs]: ZodLazy<Refs[k]> }
// >;
// type withRefsReturnType<T extends z.ZodRawShape, Refs extends { [k in keyof T]?: any }> = Without<T, keyof Refs> &
//   { [k in keyof Refs]: z.ZodType<Refs[k]> };
//# sourceMappingURL=object.js.map