"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var z = __importStar(require("./types/base"));
var util_1 = require("./helpers/util");
var array_1 = require("./types/array");
var object_1 = require("./types/object");
var union_1 = require("./types/union");
var intersection_1 = require("./types/intersection");
var tuple_1 = require("./types/tuple");
var record_1 = require("./types/record");
var lazy_1 = require("./types/lazy");
var ZodError_1 = require("./ZodError");
exports.Visitor = function (visit) { return function (schema) {
    var _def = schema._def;
    var def = _def;
    switch (def.t) {
        case z.ZodTypes.string:
            return visit(schema);
        case z.ZodTypes.number:
            return visit(schema);
        case z.ZodTypes.boolean:
            return visit(schema);
        case z.ZodTypes.date:
            return visit(schema);
        case z.ZodTypes.undefined:
            return visit(schema);
        case z.ZodTypes.null:
            return visit(schema);
        case z.ZodTypes.array:
            return visit(new array_1.ZodArray(__assign({}, def, { type: visit(def.type) })));
        case z.ZodTypes.object:
            var visitedShape = {};
            for (var key in def.shape) {
                visitedShape[key] = visit(def.shape[key]);
            }
            return visit(new object_1.ZodObject(__assign({}, def, { shape: visitedShape })));
        case z.ZodTypes.union:
            return visit(new union_1.ZodUnion(__assign({}, def, { options: def.options.map(function (option) { return visit(option); }) })));
        case z.ZodTypes.intersection:
            return visit(new intersection_1.ZodIntersection(__assign({}, def, { left: visit(def.left), right: visit(def.left) })));
        case z.ZodTypes.tuple:
            return visit(new tuple_1.ZodTuple(__assign({}, def, { items: def.items.map(function (item) { return visit(item); }) })));
        case z.ZodTypes.record:
            return visit(new record_1.ZodRecord(__assign({}, def, { valueType: visit(def.valueType) })));
        case z.ZodTypes.lazy:
            return visit(new lazy_1.ZodLazy(__assign({}, def, { getter: function () { return visit(def.getter()); } })));
        case z.ZodTypes.literal:
            return visit(schema);
        case z.ZodTypes.enum:
            return visit(schema);
        default:
            util_1.util.assertNever(def);
            break;
    }
    throw ZodError_1.ZodError.fromString("Unknown schema type.");
}; };
//# sourceMappingURL=visit.js.map