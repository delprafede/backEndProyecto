"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var z = __importStar(require("./types/base"));
var array_1 = require("./types/array");
var object_1 = require("./types/object");
exports.applyMask = function (schema, mask, mode) {
    var _def = schema._def;
    var def = _def;
    if (mask === true) {
        return schema;
    }
    else if (typeof mask === 'object' && !Array.isArray(mask)) {
        if (def.t === z.ZodTypes.array) {
            if (def.type._def.t === z.ZodTypes.object) {
                return new array_1.ZodArray({
                    t: z.ZodTypes.array,
                    nonempty: def.nonempty,
                    type: exports.applyMask(def.type, mask, mode),
                });
            }
            else {
                throw new Error("You can only " + mode + " arrays of objects.");
            }
        }
        else if (def.t === z.ZodTypes.object) {
            var modShape = {};
            var shape = def.shape;
            if (mode === 'pick') {
                if (mask === true)
                    return shape;
                for (var key in mask) {
                    if (!Object.keys(shape).includes(key))
                        throw new Error("Unknown key in pick: " + key);
                    modShape[key] = exports.applyMask(shape[key], mask[key], mode);
                }
            }
            if (mode === 'omit') {
                for (var maskKey in mask) {
                    if (!Object.keys(shape).includes(maskKey))
                        throw new Error("Unknown key in omit: " + maskKey);
                }
                for (var key in shape) {
                    if (mask[key] === true) {
                        continue;
                    }
                    else if (typeof mask[key] === 'object') {
                        modShape[key] = exports.applyMask(shape[key], mask[key], mode);
                    }
                    else {
                        modShape[key] = shape[key];
                    }
                }
            }
            return new object_1.ZodObject({
                t: z.ZodTypes.object,
                params: def.params,
                shape: modShape,
            });
        }
    }
    throw new Error("Invalid mask!\n\n" + JSON.stringify(mask, null, 2));
};
//# sourceMappingURL=oldmasker.js.map